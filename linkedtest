package myPackage;


class DoublyLinkedList<T> {
    
    
    
     // Node class
    private class Node {

        T data;
        Node prev, next;

        Node(T data) {
            this.data = data;
        }
    }

    private Node head, tail; // first and last nodes
    private int size;        // number of elements

    //Part 1 - Methods 
    // Add element at the front
    // Time - O(1) - Just creates a new node and adjust head pointers.
    // Space - O(1) - Uses constant extra memory aside from the new node.
    public void addFirst(T data) {
        Node newNode = new Node(data);
        if (head == null) {
            head = tail = newNode;
        } else {
            newNode.next = head;
            head.prev = newNode;
            head = newNode;
        }
        size++;
    }

    // Add element at the end
    // Time - O(1) - Directly links the new node after tail.
    // Space - O(1) - Only constant memory for the new node.
    public void addLast(T data) {
        Node newNode = new Node(data);
        if (tail == null) {
            head = tail = newNode;
        } else {
            tail.next = newNode;
            newNode.prev = tail;
            tail = newNode;
        }
        size++;
    }

    // Remove element from the front
    // Time - O(1) - Simply modes the head pointer forward.
    // Space - O(1) - No extra memory used.
    public T removeFirst() {
        if (head == null) {
            return null;
        }
        T data = head.data;
        head = head.next;
        if (head != null) {
            head.prev = null;
        } else {
            tail = null;
        }
        size--;
        return data;
    }

    // Remove element from the end
    // Time - O(1) - Directly updates the tail pointer.
    // Space - O(1) - No extra memory used.
    public T removeLast() {
        if (tail == null) {
            return null;
        }
        T data = tail.data;
        tail = tail.prev;
        if (tail != null) {
            tail.next = null;
        } else {
            head = null;
        }
        size--;
        return data;
    }

    // Insert at specific index
    // Time - O(n) - Must traverse the list to reach the correct index.
    // Space - O(1) - No extra memory used.
    public void insertAtIndex(int index, T data) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }

        if (index == 0) {
            addFirst(data);
            return;
        }
        if (index == size) {
            addLast(data);
            return;
        }

        Node newNode = new Node(data);
        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        Node prevNode = current.prev;

        newNode.next = current;
        newNode.prev = prevNode;
        prevNode.next = newNode;
        current.prev = newNode;
        size++;
    }

    // Delete element at specific index
    // Time - O(n) - Requires traversal to the node at that index.
    // Space - O(1) - No extra memory, just adjust pointers.
    public T deleteAtIndex(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }

        if (index == 0) {
            return removeFirst();
        }
        if (index == size - 1) {
            return removeLast();
        }

        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }

        T data = current.data;
        current.prev.next = current.next;
        current.next.prev = current.prev;
        size--;
        return data;
    }

    // Get element at index
    // Time - O(n) - Traverses from the head until the index.
    // Space - O(1) - No extra memoryrequired.
    public T get(int index) {
        if (index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }

        Node current = head;
        for (int i = 0; i < index; i++) {
            current = current.next;
        }
        return current.data;
    }

    // Check if element exists
    // Time - O(n) - May need to scan all nodes until the element is found or list ends.
    // Space - O(1) - No extra memory required.
    public boolean contains(T data) {
        Node current = head;
        while (current != null) {
            if (current.data.equals(data)) {
                return true;
            }
            current = current.next;
        }
        return false;
    }

    // Return number of elements
    // Time - O(1) - Returns a stored counter (updated during add/remove).
    // Space - O(1) - Uses only one integer vAriable.
    public int size() {
        return size;
    }

    // Reverse the list in-place
    // Time - O(n) - Must visit and swap links for all nodes.
    // Space - O(1) - Does reversal in place without creating a new list.
    public void reverse() {
        Node current = head;
        Node temp = null;
        while (current != null) {
            temp = current.prev;
            current.prev = current.next;
            current.next = temp;
            current = current.prev;
        }
        if (temp != null) {
            head = temp.prev;
        }
    }

    //Part 2 - Swap of Nodes
    public void swapNodes(int index1, int index2) {
        if (index1 < 0 || index1 >= size || index2 < 0 || index2 >= size) {
            throw new IndexOutOfBoundsException("Invalid indices");
        }
        if (index1 == index2) {
            return;
        }

        // Ensure index1 < index2
        if (index1 > index2) {
            int tempIndex = index1;
            index1 = index2;
            index2 = tempIndex;
        }

        // Find nodes
        Node node1 = head;
        for (int i = 0; i < index1; i++) {
            node1 = node1.next;
        }

        Node node2 = head;
        for (int i = 0; i < index2; i++) {
            node2 = node2.next;
        }

        // Adjacent nodes case
        if (node1.next == node2) {
            Node prev1 = node1.prev;
            Node next2 = node2.next;

            if (prev1 != null) {
                prev1.next = node2;
            }
            node2.prev = prev1;

            node2.next = node1;
            node1.prev = node2;

            node1.next = next2;
            if (next2 != null) {
                next2.prev = node1;
            }
        } else {
            // Non-adjacent swap
            Node prev1 = node1.prev;
            Node next1 = node1.next;
            Node prev2 = node2.prev;
            Node next2 = node2.next;

            if (prev1 != null) {
                prev1.next = node2;
            }
            if (next1 != null) {
                next1.prev = node2;
            }
            if (prev2 != null) {
                prev2.next = node1;
            }
            if (next2 != null) {
                next2.prev = node1;
            }

            Node tempPrev = node1.prev;
            Node tempNext = node1.next;
            node1.prev = node2.prev;
            node1.next = node2.next;
            node2.prev = tempPrev;
            node2.next = tempNext;
        }

        // Fix head and tail
        if (index1 == 0) {
            head = node2;
        } else if (index2 == 0) {
            head = node1;
        }

        if (index1 == size - 1) {
            tail = node2;
        } else if (index2 == size - 1) {
            tail = node1;
        }
    }

    // Printing all values of the list 
    public void printList() {
        Node current = head;
        while (current != null) {
            System.out.print(current.data + " ");
            current = current.next;
        }
        System.out.println();
    }
}
    
    
    
    
    
